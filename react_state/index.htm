<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8">
    <title>React State</title>
    <script src="https://unpkg.com/react@16/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@16/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>

</head>

<body>
    <style>
        body {
            padding-top: 50px;
        }

        .z {
            color: red;
            margin: 1em 0;
        }

        .hidden {
            display: none;
        }

        .t {
            font-style: italic;
        }

        .t99 {
            padding: 10px;
            background: #8fff00;
        }

        .t97 {
            color: #fff;
            background: #144d74;
            padding: 15px;
            margin: 0;
            font-style: normal;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            z-index: 9999;
        }

        .t97 a {
            color: #ffd600;
        }

        .t97 button {
            float: right;
        }

        #ab {
            border: 1px dashed orange;
        }

        .hi {
            background: yellow;
        }
    </style>

    <style>
        .whores-container {
            background: #751a1a;
            width: 910px;
            height:  474px;
            padding: 10px;
            overflow: hidden;
            margin-bottom: 1em;
        }

        .whore {
            background: white;
            padding: 10px;
            width: 200px;
            position: relative;
            font-family: Arial, sans-serif;
            font-size: 15px;
            cursor: pointer;
            float: left;
            margin: 0 0 10px 10px;
        }

        .whore:first-child {
            margin-left: 0;
        }

        .whore-name {
            font-size: 22px;
            font-family: Tahoma, sans-serif;
            margin-bottom: 5px;
            color: #7b1e1e;
        }

        .whore img {
            margin-bottom: 10px;
        }

        .whore-teaser {
            position: absolute;
            top: 0;
            bottom: 0;
            left: 0;
            right: 0;
            background: white;
            box-sizing: border-box;
            padding: 10px;
            display: none;
        }

        .whore:hover .whore-teaser {
            display: block;
        }

        .whore-phone {
            font-size: 18px;
            font-weight: bold;
            margin: 5px 0 1px;
        }
    </style>

    <script>
        var jasmine = {
            name: 'Жасмин',
            photo: 'images/zhasmin.jpg',
            age: '18',
            boobs: '3',
            weight: '50',
            height: '168',
            phone: '+380960000000',
            can_come: true,
            teaser: 'Очень нежная девчонка доставит Вам удовольствие по полной программе! Каждый мужчина ищет идеальную женщину - попробуй, может быть я именно та которая тебе нужна... Фото мои 1000%!!! Выезда НЕТ!!! Квартира для встреч ЕСТЬ, 5 мин от ст. метро \"Дворец Украина\"'
        };
    </script>

    <style>
        .cats-container {
            width: 600px;
            height: 200px;
            margin-bottom: 1em;
        }

        .cat-container-1,
        .cat-container-2 {
            float: left;
            width: 49%;
            height: 200px;
            box-sizing: border-box;
            padding: 10px;
            border: 1px dashed #000;
            margin-left: 0.5%;
        }
    </style>

    <style>
        .tooth-container {
            width: 600px;
            height: 266px;
            padding: 5px;
            border: 1px solid black;
            margin-bottom: 1em;
        }

        .tooth + .boy {
            display: none;
        }
    </style>

    <style>
        .ski-resort {
            width: 600px;
            height: 170px;
            border: 1px solid #000;
            position: relative;
            overflow-x: auto;
            overflow-y: hidden;
            margin-bottom: 1em;
        }

        .skier {
            width: 150px;
            transform: scale(-1, 1);
            position: absolute;
            top: 85px;
            left: 0;
        }
    </style>

    <style>
        .mikki_tiles {
            width: 400px;
            height: 400px;
            border: 1px solid black;
        }

        .mikki_tile {
            width: 20px;
            height: 20px;
            float: left;
        }
    </style>

    <script>
        var mikki = [
            '  XXXX        XXXX  ',
            ' XXXXXX      XXXXXX ',
            'XXXX XX XXXX XX XXXX',
            'XXX  XXXXXXXXXX  XXX',
            'XXXXXXXXXXXXXXXXXXXX',
            'XXXXXXX      XXXXXXX',
            ' XXXXX        XXXXX ',
            '   XXX  XX XX XXX   ',
            '    XX  XX XX XX    ',
            '    XXX X  X  XX    ',
            '    X         XX    ',
            '    X    XXX  XX    ',
            '    XX   XXX  XX    ',
            '     XX      XX     ',
            '      X  XX  X      ',
            '       X    X       ',
            '     XX XXXX XX     ',
            '     XX      XX     ',
            '    XX        XX    ',
            '   XXXXXXXXXXXXXX   '
        ];
    </script>

    <style>
        .scene {
            width: 800px;
            height: 272px;
            position: relative;
            overflow: hidden;
            border: 1px solid black;
            margin-bottom: 1em;
        }

        .tile {
            width: 16px;
            height: 16px;
            position: absolute;
            background-image: url('images/mario_tileset.png');
            background-repeat: no-repeat;
            background-position: 16px 16px;
        }

        .tile.x_z {
            background-position: -96px -112px;
        }
        .tile.x_k {
            background-position: -144px -112px;
        }
        .tile.x_c {
            background-position: -128px -112px;
        }
        .tile.x_t {
            background-position: 0 -48px;
            width: 32px;
            height: 48px;
        }
        .tile.x_g {
            background-position: 0 -128px;
            width: 48px;
            height: 32px;
        }
        .tile.x_b {
            background-position: -144px -208px;
            width: 80px;
            height: 48px;
        }
        .tile.x_d {
            background-position: 0 -96px;
            width: 80px;
            height: 32px;
        }
        .tile.x_w {
            background-position: -96px -224px;
            width: 48px;
            height: 32px;
        }
    </style>

    <script>
        var map = [
            '                                                  ',
            '                                                  ',
            '                                                  ',
            '                    w                             ',
            '                                       w          ',
            '                                                  ',
            '                       c                          ',
            '                                                  ',
            '                                        c         ',
            '                                                  ',
            '                c    kkkkk                        ',
            ' b                                     t        c ',
            '            d    g       d                        ',
            '                                                  ',
            'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz',
            'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz',
            'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'
        ];
    </script>

    <style>
        .slide {
            width: 302px;
            height: 347px;
            background-position: center;
            background-repeat: no-repeat;
            background-size: cover;
            display: none;
        }

        .slide.active {
            display: block;
        }

        .pagination {
            margin: 1em 0;
        }
    </style>

    <style>
        .question {
            color: #0078d7;
            padding: 10px 20px 10px;
            border-top: 1px solid #d2d2d2;
            cursor: pointer;
        }

        .question:hover {
            background: #e6e6e6;
        }

        .answer {
            padding: 10px 20px 10px;
            margin: 0;
            display: none;
        }

        .question.active + .answer {
            display: block;
        }
    </style>

    <style>
        .tabs {
            border-bottom: 1px solid black;
            width: 400px;
        }

        .tabs .item {
            background: grey;
            border: 1px solid black;
            border-radius: 10px 10px 0 0;
            display: inline-block;
            margin-bottom: -1px;
            padding: 10px 20px;
            cursor: pointer;
        }

        .tabs .item:hover,
        .tabs .item.active {
            background: lightgray;
        }

        .tabs-content .item {
            display: none;
        }

        .tabs-content .item.active {
            display: block;
        }
    </style>

    <style>
        .overlay {
            position: fixed;
            top: 0;
            bottom: 0;
            left: 0;
            right: 0;
            background: black;
            opacity: 0.8;
        }

        .pop-up {
            position: fixed;
            left: 50%;
            top: 50%;
            margin-top: -200px;
            margin-left: -150px;
            background: white;
            border-radius: 10px;
            width: 300px;
            height: 400px;
            padding: 20px;
            box-sizing: border-box;
        }

        .pop-up input {
            margin-bottom: 10px;
            display: block;
        }

        .pop-up .close {
            position: absolute;
            width: 30px;
            height: 30px;
            text-align: center;
            line-height: 30px;
            background: black;
            color: white;
            border-radius: 50%;
            right: -15px;
            top: -15px;
            cursor: pointer;
            font-family: Tahoma, sans-serif;
            border: none;
        }

        .pop-up .close:hover {
            background: #912626;
        }
    </style>

    <div id="app"></div>

    <script type="text/babel">
        class TaskChangeColor extends React.Component {
            state = {
                color: 'black'
            };

            onClick = () => {
                this.setState({
                    color: 'green'
                });
            };

            render() {
                const { onClick, state } = this;
                const style = {
                    color: state.color
                };

                return (
                    <>
                        <p className="z">При клике на кнопку изменить цвет текста</p>
                        <p className="t t1" style={style}>Тест</p>
                        <button onClick={onClick} className="b b1">Изменить цвет текста</button>
                    </>
                );
            }
        }

        class TaskChangeBackgroundColor extends React.Component {
            state = {
                background: 'none'
            };

            handleClick = () => {
                this.setState({
                    background: 'red'
                });
            };

            render() {
                const { handleClick, state: {background} } = this;

                return (
                    <>
                        <p className="z">При клике на кнопку изменить цвет фона</p>
                        <p className="t t2" style={{background}}>Тест</p>
                        <button onClick={handleClick} className="b b2">Изменить цвет фона</button>
                    </>
                );
            }
        }

        class TaskChangeHref extends React.Component {
            state = {
                href: 'https://habrahabr.ru/'
            };

            onClick = () => {
                this.setState({
                    href: 'https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Conditional_Operator'
                });
            };

            render() {
                const { onClick, state: {href} } = this;

                return (
                    <>
                        <p className="z">При клике на кнопку изменить путь ссылки</p>
                        <p className="t t3"><a href={href}>Тест</a></p>
                        <button onClick={onClick} className="b b3">Изменить путь ссылки</button>
                    </>
                );
            }
        }

        class TaskChangeSrc extends React.Component {
            state = {
                src: 'images/kaktus.jpg'
            };

            onClick = () => {
                this.setState({
                    src: 'images/fish.jpg'
                });
            };

            render() {
                const { onClick, state: {src} } = this;

                return (
                    <>
                        <p className="z">При клике на кнопку изменить путь к картинке</p>
                        <p className="t t4">Тест <img src={src} width="100" /></p>
                        <button onClick={onClick} className="b b4">Изменить путь к картинке</button>
                    </>
                );
            }
        }

        class TaskChangeId extends React.Component {
            state = {
                id: 'ab'
            };

            onClick = () => {
                this.setState({
                    id: 'bc'
                });
            };

            render() {
                const { onClick, state: {id} } = this;

                return (
                    <>
                        <p className="z">При клике на кнопку изменить id элемента</p>
                        <p className="t t5" id={id}>Тест</p>
                        <button onClick={onClick} className="b b5">Изменить id элемента</button>
                    </>
                );
            }
        }

        class TaskChangeText extends React.Component {
            state = {
                text: 'Default Text'
            };

            onClick = () => {
                this.setState({
                    text: 'New Text'
                });
            };

            render() {
                const { onClick, state: {text} } = this;

                return (
                    <>
                        <p className="z">При клике на кнопку изменить текст</p>
                        <p className="t t6">{text}</p>
                        <button onClick={onClick} className="b b6">Изменить текст</button>
                    </>
                );
            }
        }

        class TaskChangeHtml extends React.Component {
            state = {
                htmlContent: 'Текст <b>Цветы</b>'
            };

            onClick = () => {
                this.setState({
                    htmlContent: 'Текст <i>Цветы</i>'
                });
            };

            render() {
                const { onClick, state: {htmlContent} } = this;

                return (
                    <>
                        <p className="z">При клике на кнопку изменить HTML</p>
                        <p className="t t7" dangerouslySetInnerHTML={{__html: htmlContent}} />
                        <button onClick={onClick} className="b b7">Изменить HTML</button>
                    </>
                );
            }
        }

        class TaskChangeFontSize extends React.Component {
            state = {
                fontSize: '14px'
            };

            onClick = () => {
                this.setState({
                    fontSize: '30px'
                });
            };

            render() {
                const { onClick, state: {fontSize} } = this;

                return (
                    <>
                        <p className="z">При клике на кнопку изменить размер шрифта</p>
                        <p style={{fontSize}} className="t t8">Тест</p>
                        <button onClick={onClick} className="b b8">Изменить размер шрифта</button>
                    </>
                );
            }
        }

        class TaskChangeAddClass extends React.Component {
            state = {
                className: 't t9'
            };

            onClick = () => {
                this.setState({
                    className: 't t9 hi'
                });
            };

            render() {
                const { onClick, state: {className} } = this;

                return (
                    <>
                        <p className="z">При клике на кнопку добавить класс 'hi'</p>
                        <p className={className}>Тест</p>
                        <button onClick={onClick} className="b b9">Добавить класс 'hi'</button>
                    </>
                );
            }
        }

        class TaskChangeRemoveClass extends React.Component {
            state = {
                className: 't t9 hi'
            };

            onClick = () => {
                this.setState({
                    className: 't t9'
                });
            };

            render() {
                const { onClick, state: {className} } = this;

                return (
                    <>
                        <p className="z">При клике на кнопку удалить класс 'hi'</p>
                        <p className={className}>Тест</p>
                        <button onClick={onClick} className="b b10">Удалить класс 'hi'</button>
                    </>
                );
            }
        }

        class TaskChangeToggleClass extends React.Component {
            state = {
                isDefaultClassName: true
            };

            onClick = () => {
                this.setState((state) => ({
                    isDefaultClassName: !state.isDefaultClassName
                }));
            };

            render() {
                const { onClick, state: {isDefaultClassName} } = this;

                return (
                    <>
                        <p className="z">При клике на кнопку добавлять/удалять (в зависимости от наличия) класс 'hi'</p>
                        <p className={isDefaultClassName ? "b b11" : "b b11 hi"}>Тест</p>
                        <button onClick={onClick} className="b b11">Добавить/удалить (в зависимости от наличия) класс 'hi'</button>
                    </>
                );
            }
        }

        class TaskShowClass extends React.Component {
            state = {
                className: ''
            };

            onClick = (e) => {
                this.setState({
                    className: e.target.className
                });
            };

            componentDidMount() {
                document.addEventListener('click', this.onClick)
            }

            componentWillUnmount() {
                document.removeEventListener('click', this.onClick)
            }

            render() {
                const {className} = this.state;

                return (
                    <>
                        <p className="z">При клике на любом элементе страницы выводить значение атрибута class элемента</p>
                        <p className="t t12">{className}</p>
                    </>
                );
            }
        }

        // Пропускаем!
        class TaskTodo1 extends React.Component {
            render() {
                return (
                    <>
                        <p className="z">При клике на кнопку перевести текст на английский язык (перевод хранится в атрибуте data-en элемента)</p>
                        <p className="t t13" data-en="sun">Солнце</p>
                        <button className="b b13">Перевести</button>
                    </>
                );
            }
        }

        class TaskChangeBackgroundColorOnResize extends React.Component {
            state = {
                backgroundColor: null
            };

            onResize = () => {
                const r = Math.round(Math.random() * 255);
                const g = Math.round(Math.random() * 255);
                const b = Math.round(Math.random() * 255);
                const backgroundColor = `rgb(${r}, ${g}, ${b})`;

                this.setState({
                    backgroundColor
                });
            };

            componentDidMount() {
                window.addEventListener('resize', this.onResize)
            }

            componentWillUnmount() {
                window.removeEventListener('resize', this.onResize)
            }

            render() {
                const {backgroundColor} = this.state;

                return (
                    <>
                        <p className="z">При изменении размеров окна вкладки или браузера изменять фоновый цвет абзаца (использовать RGB и Math.random)</p>
                        <p className="t t99" style={{backgroundColor}} >Drugs are bad, m'kay, so, if you do drugs, you're bad, m'kay, because drugs are bad.</p>
                    </>
                );
            }
        }

        class TaskInputWithCounter extends React.Component {
            state = {
                value: 'some stuff about pisiu kozla'
            };

            onChange = (e) => {
                this.setState({
                    value: e.target.value
                });
            };

            render() {
                const {onChange, state: {value}} = this;

                return (
                    <>
                        <p className="z">При изменении значения элемента формы выводить количество символов которое оно содержит</p>
                        <p className="t t98">
                            <input onChange={onChange} type="text" value={value} /> <span className="t98-2">{value.length}</span>
                        </p>
                    </>
                );
            }
        }

        class TaskWhores extends React.Component {
            state = {
                whores: [
                    {
                        name: 'Сильвия',
                        photo: 'images/silvia.jpg',
                        age: '18',
                        boobs: '4',
                        weight: '50',
                        height: '168',
                        phone: '+380960000001',
                        can_come: true,
                        teaser: 'Очень нежная девчонка доставит Вам удовольствие по полной программе! Каждый мужчина ищет идеальную женщину - попробуй, может быть я именно та которая тебе нужна... Фото мои 1000%!!! Выезда НЕТ!!! Квартира для встреч ЕСТЬ, 5 мин от ст. метро \"Дворец Украина\"'
                    }
                ]
            };

            onClick = () => {
                this.setState((state) => ({
                    whores: [...state.whores, jasmine]
                }));
            };

            render() {
                const {onClick, state: {whores}} = this;

                return (
                    <>
                        <p className="z">Вывести на экран анкету Жасмин используя переменную jasmine (смотри исходный код)</p>
                        <div className="whores-container">
                            {whores.map((whore) =>
                                <div className="whore">
                                    <div className="whore-name">{whore.name}</div>
                                    <img src={whore.photo} width="200" />
                                    <div className="whore-age">Возраст: {whore.age}</div>
                                    <div className="whore-boobs">Размер груди: {whore.boobs}</div>
                                    <div className="whore-height">Рост: {whore.height}</div>
                                    <div className="whore-weight">Вес: {whore.weight}</div>
                                    <div className="whore-phone">{whore.phone}</div>
                                    <div className="whore-can-come">Выезд: {whore.can_come}</div>
                                    <div className="whore-teaser">{whore.teaser}</div>
                                </div>
                            )}
                        </div>
                        <button onClick={onClick} className="b b14">Добавить анкету</button>
                    </>
                );
            }
        }

        class TaskFish extends React.Component {
            state = {
                isFishInContainerOne: true
            };

            onClick = () => {
                this.setState((state) => ({
                    isFishInContainerOne: !state.isFishInContainerOne
                }));
            };

            render() {
                const { onClick, state: {isFishInContainerOne} } = this;

                return (
                    <>
                        <p className="z">Переместить рыбу из первого контейнера во второй (при повторном клике из второго в первый и т.д.)</p>

                        <div className="cats-container">
                            <div className="cat-container-1">
                                <img className="cat" src="images/kat.png" width="100" />
                                {isFishInContainerOne && <img className="fish" src="images/fish.jpg" width="100" />}
                            </div>

                            <div className="cat-container-2">
                                <img className="cat" src="images/kat.png" width="100" />
                                {!isFishInContainerOne && <img className="fish" src="images/fish.jpg" width="100" />}
                            </div>
                        </div>

                        <button onClick={onClick} className="b b15">Переместить рыбу</button>
                    </>
                );
            }
        }

        class TaskTooth extends React.Component {
            state = {
                hasTooth: true
            };

            onClick = () => {
                this.setState({
                    hasTooth: false
                });
            };

            render() {
                const { onClick, state: {hasTooth} } = this;

                return (
                    <>
                        <p className="z">Удалить зуб</p>

                        <div className="tooth-container">
                            {hasTooth &&  <img className="tooth" src="images/tooth.jpg" width="200" />}
                            <img className="boy" src="images/bro.jpg" width="600" />
                        </div>

                        <button onClick={onClick} className="b b16">Удалить зуб</button>
                    </>
                );
            }
        }

        class TaskSkier extends React.Component {
            state = {
                x: 0
            };

            move = () => {
                this.setState((state) => ({
                    x: state.x + 5
                }));
            };

            onStart = () => {
                this.interevalId = setInterval(this.move, 16);
            };

            onStop = () => {
                clearInterval(this.interevalId);
            };

            render() {
                const { onStart, onStop, state } = this;

                const style = {
                    left: state.x + 'px'
                };

                return (
                    <>
                        <p className="z">Хочу чтоб лыжник бесконечно ехал вправо (сдвиг на 5px каждые 16ms). При нажатии на кнопку "Стоп!" останавливался.</p>

                        <div className="ski-resort">
                            <img className="skier" style={style} src="images/skier.gif" />
                        </div>

                        <button onClick={onStart} className="b b17">Поехали!</button>
                        <button onClick={onStop} className="b b17-2">Стоп!</button>
                    </>
                );
            }
        }

        class TaskMikki extends React.Component {
            getTiles() {
                let newMikki = mikki.join('').split('');

                return newMikki.map((tile) => tile === 'X' ? <div className="mikki_tile" style={{backgroundColor: 'black'}}></div> : <div className="mikki_tile"></div>);
            }

            render() {
                const { getTiles } = this;

                return (
                    <>
                        <p className="z">Хочу такое (смотри исходный код) <img src="images/mikki.png" /></p>
                        <div className="mikki_tiles">
                            { getTiles() }
                        </div>
                    </>
                );
            }
        }

        class TaskMario extends React.Component {
            state = {
                showWorld: false
            };

            onClick = () => {
                this.setState({
                    showWorld: true
                });
            };

            getTiles() {
                return map.map((extElem, extIdx) =>
                    extElem.split('').map((innerElem, innerIdx) =>
                        <div className={'tile x_' + innerElem} style={{top: extIdx * 16, left: innerIdx * 16}}></div>
                    )
                );
            }

            render() {
                const {onClick, getTiles, state: {showWorld}} = this;

                return (
                    <>
                        <p className="z">Создать мир Марио <img src="images/mario.png" /></p>

                        <div className="scene">
                            { showWorld && getTiles() }
                        </div>

                        <button onClick={onClick} className="b b18">Создать мир</button>
                    </>
                );
            }
        }

        class TaskSlider extends React.Component {
            slides = [
                {src: 'images/slide1.jpg'},
                {src: 'images/slide2.jpg'},
                {src: 'images/slide3.jpg'},
                {src: 'images/slide4.jpg'},
                {src: 'images/slide5.jpg'}
            ];

            state = {
                activeSlideIdx: 0
            };

            onPrevius = () => {
                this.setState((state) => ({
                    activeSlideIdx: state.activeSlideIdx === 0 ? this.slides.length - 1 : state.activeSlideIdx - 1
                }));
            };

            onNext = () => {
                this.setState((state) => ({
                    activeSlideIdx: state.activeSlideIdx === this.slides.length - 1 ? 0 : state.activeSlideIdx + 1
                }));
            };

            render() {
                const { onNext, onPrevius, slides, state: {activeSlideIdx} } = this;

                return (
                    <>
                        <p className="z">Кликая по кнопкам "предыдущая" и "следующая" я хочу чтобы менялись соответственно слайды</p>

                        <div className="slider">
                            {
                                slides.map((slide, idx) => {
                                    const className = idx === activeSlideIdx  ? 'slide active' : 'slide';
                                    return <img src={slide.src} className={className} />;
                                })
                            }
                        </div>

                        <div className="pagination">
                            <button onClick={onPrevius} className="previous">Previous</button>
                            <button onClick={onNext} className="next">Next</button>
                        </div>
                    </>
                );
            }
        }

        class TaskFaq extends React.Component {
            items = [
                {
                    question: `
                        В чем разница между 32-разрядной и 64-разрядной версиями Windows?
                    `,
                    answer: `
                        Термины "32-разрядный" и "64-разрядный" описывают, каким образом процессор компьютера
                        (он также называется ЦП) обрабатывает информацию. 64-разрядная версия Windows
                        обрабатывает большие объемы оперативной памяти (ОЗУ) более эффективно по сравнению с
                        32-разрядной версией. Не все устройства могут работать под управлением 64-разрядных
                        версий Windows.
                    `
                },
                {
                    question: `
                        Моя копия Windows приобретена через учебное заведение. Можно ли скачать ее здесь?
                    `,
                    answer: `
                        Да, но вам потребуется ключ продукта. Перейдите на страницу загрузок <b>Академические
                        продукты</b> и выберите версию Windows, чтобы начать.
                    `
                },
                {
                    question: `
                        Что делать после создания носителя с помощью средства создания носителя?
                    `,
                    answer: `
                        <p>Чтобы установить Windows, после создания установочного носителя выполните одно из следующих действий:</p>

                        <ul>
                            <li>
                                Подключите USB-устройство флэш-памяти к компьютеру, на который необходимо
                                установить Windows, найдите его в проводнике и откройте файл setup.exe.
                                Выполняйте инструкции, отображаемые в ходе установки.
                            </li>
                            <li>
                                Если ваш компьютер настроен на загрузку с USB-накопителя, подключите
                                USB-устройство флэш-памяти к компьютеру, на который необходимо установить
                                Windows, перезагрузите его, а затем следуйте инструкциям по установке.
                            </li>
                            <li>
                                Если компьютер настроен на загрузку с DVD-дисковода, вставьте DVD-диск в
                                компьютер, перезагрузите компьютер, а затем следуйте инструкциям по установке.
                            </li>
                        </ul>
                    `
                },
                {
                    question: `
                        Этот образ диска загрузочный?
                    `,
                    answer: `
                        Образ диска с этого сайта можно использовать для создания загрузочных USB-носителей и
                        DVD-дисков, которые предоставляют доступ к средствам восстановления.
                    `
                },
            ];

            state = {
                activeQuestionIdxs: [] // [0, 1, 2]
            };

            onClick = (idx) => {
                this.setState((state) => ({
                    activeQuestionIdxs: state.activeQuestionIdxs.includes(idx) ?
                        state.activeQuestionIdxs.filter((item) => item !== idx) :
                        state.activeQuestionIdxs.concat([idx])
                }));
            };

            render() {
                const { onClick, items, state: {activeQuestionIdxs} } = this;

                return (
                    <>
                        <p className="z">Кликая вопросам я хочу видеть ответы на них</p>

                        <dl className="faq">
                            {
                                items.map((item, idx) => {
                                    const questionClassName = `question ${activeQuestionIdxs.includes(idx) ? 'active' : ''}`;

                                    return (
                                        <>
                                            <dt className={questionClassName} onClick={() => {onClick(idx)}} dangerouslySetInnerHTML={{__html: item.question}} />
                                            <dd className="answer" dangerouslySetInnerHTML={{__html: item.answer}} />
                                        </>
                                    );
                                })
                            }
                        </dl>
                    </>
                );
            }
        }

        class TaskTabs extends React.Component { // TODO:
            items = [
                {
                    day: `Сегодня`,
                    films: `
                        <ul>
                            <li>Звёздные войны: Последние джедаи</li>
                            <li>Счастливый день смерти</li>
                            <li>Дыши</li>
                        </ul>
                    `
                },
                {
                    day: `Завтра`,
                    films: `
                        <ul>
                            <li>Киборги</li>
                            <li>Земля троллей</li>
                            <li>За пропастью во ржи</li>
                        </ul>
                    `
                },
                {
                    day: `23 Декабря`,
                    films:`
                       <ul>
                            <li>Мой любимый динозавр</li>
                            <li>Фердинанд</li>
                            <li>Джуманджи: Зов джунглей</li>
                        </ul>
                    `
                },
            ];

            state = {
                activeDayIdx: 0
            };

            onClick = (idx) => {
                this.setState((state) => ({
                    activeDayIdx: idx
                }));
            };


            render() {
                const { onClick, items, state: {activeDayIdx} } = this;
                return (
                    <>
                        <p className="z">Кликая по вкладкам я хочу видеть связанное содержимое</p>

                        <h2>Сеансы</h2>
                        <div className="tabs">

                            {items.map((item, idx) => {
                                const dayClassName = `${idx === activeDayIdx ? 'active item' : 'item'}`;

                                return (
                                    <>
                                        <div onClick={() => {onClick(idx)
                                        }} dangerouslySetInnerHTML={{__html: item.day}}
                                             className={dayClassName}></div>

                                    </>
                                );
                            })}
                        </div>
                        <div className="tabs-content" >
                            <div className="active item" dangerouslySetInnerHTML={{__html: items[activeDayIdx].films}}/>
                        </div>
                    </>
                );
            }
        }

        class TaskPopUp extends React.Component {
            state = {
                showPopup: false
            };

            onClick = () => {
                this.setState((state) => ({
                    showPopup: !state.showPopup
                }));
            };

            render() {
                const { onClick, state: { showPopup } } = this;

                return (
                    <>
                        <p className="z">Кликая на кнопку Login я хочу чтобы затенялся экран и по середине экрана появлялось окошко для авторизации закрыть которое можно кликнув по кнопке с крестиком</p>
                        {
                            showPopup ?
                                <>
                                    <div className="overlay"></div>
                                    <div className="pop-up pop-up--login">
                                        <button onClick={onClick} className="close">x</button>
                                        <input type="text" placeholder="Username"/>
                                        <input type="password" placeholder="Password"/>
                                        <button className="login">Login</button>
                                    </div>
                                </> :
                                null
                        }

                        <button onClick={onClick} className="show-login-pop-up">Login</button>
                    </>
                );
            }
        }

        class TaskLink extends React.Component {
            onClick = (e) => {
                e.preventDefault();
            };

            render() {
                const { onClick } = this;

                return (
                    <>
                        <p className="z">Отменить действие по-умолчанию при клике на ссылку</p>

                        <p><a onClick={onClick} href="https://ebanoe.it/" className="link-ebanoe" target="_blank">Ebanoe.IT — голая правда о нашем айти</a></p>
                    </>
                );
            }
        }

        class TaskAd extends React.Component {
            state = {
                hideAd: false
            };

            onClick = () => {
                localStorage.setItem('hideAd', 'true');

                this.setState({
                    hideAd: true
                });
            };

            componentDidMount() {
                const hideAd = localStorage.getItem('hideAd');

                if (hideAd === 'true') {
                    this.setState({
                        hideAd: true
                    });
                }
            }

            render() {
                const {state: {hideAd}, onClick} = this;

                return (
                    <>
                        <p className="z">Надоела реклама про увеличение члена? При клике на кнопку "Больше не показывать" заноси в localStorage значение которое будешь проверять при загрузке страницы</p>
                        { !hideAd && <p className="t t97">Хочешь увеличить член? Заходи <a href="http://pornhub.com" target="_blank">сюда</a>! <button onClick={onClick} className="b97">Больше не показывать</button></p> }
                    </>
                );
            }
        }

        var App = function() {
            return (
                <>
                    <TaskChangeColor />
                    <TaskChangeBackgroundColor />
                    <TaskChangeHref />
                    <TaskChangeSrc />
                    <TaskChangeId />
                    <TaskChangeText />
                    <TaskChangeHtml />
                    <TaskChangeFontSize />
                    <TaskChangeAddClass />
                    <TaskChangeRemoveClass />
                    <TaskChangeToggleClass />
                    <TaskShowClass />
                    <TaskChangeBackgroundColorOnResize />
                    <TaskInputWithCounter />
                    <TaskWhores />
                    <TaskFish />
                    <TaskTooth />
                    <TaskSkier />
                    <TaskMikki />
                    <TaskMario />
                    <TaskSlider />
                    <TaskFaq />
                    <TaskTabs />
                    <TaskPopUp />
                    <TaskLink />
                    <TaskAd />
                </>
            );
        };

        ReactDOM.render(<App />, document.querySelector('#app'));
    </script>
</body>
</html>