Коллекции
    each each_.each(list, iteratee, [context]) Проходит по всему списку элементов, вызывая для каждого из них функцию iteratee, которая будет вызвана в контексте context, если он был передан. При каждом вызове в iteratee будут переданы 3 аргумента: (element, index, list). В случае, если list является JavaScript-объектом, то в iteratee будут переданы (value, key, list). Возвращает list для цепочного вызова.
    map _.map(list, iteratee, [context]) Вернёт новый массив, полученный преобразованием каждого элемента list в функции (iteratee). Функция iteratee получает три аргумента: значение value, индекс index (или ключ key), и ссылку на весь список list.
    reduce _.reduce(list, iteratee, [memo], [context]) Также известная как inject или foldl, функция reduce объединяет в одно все значения из list. Memo хранит начальное состояние, и должна возвращаться функцией iteratee после каждого успешного шага вычислений. Функция iteratee получает четыре аргумента: memo, затем value и index (или key) итерации, и, последней, ссылку на весь list.
    reduceRight _.reduceRight(list, iteratee, memo, [context]) Правоассоциативная версия reduce. Однако foldr не так полезен в JavaScript, как в языках с ленивыми вычислениями.
    find _.find(list, predicate, [context]) Вызывает для каждого элемента list функцию сравнения predicate, возвращая первый элемент, для которого predicate вернула true, или undefined, если ни один элемент не подошёл. Выполнение функции при этом прерывается, т.е. вызовов iterator для оставшейся части list не будет. 
    filter _.filter(list, predicate, [context]) Проходит через каждое значение list, возвращая массив всех значений, для которых predicate вернул true.
    where _.where(list, properties)	Вернёт массив из элементов list, для которых совпадают значения для соответсвующих ключей, перечисленные в properties.
    findWhere _.findWhere(list, properties) Сработает аналогично where, но вернёт только первый элемент, соответствующий заданным properties.
    reject _.reject(list, predicate, [context]) Возвращает массив, содержащий все значения list, за исключением элементов, для которых функция predicate вернула значение true. Т.е. reject является «антонимом» filter.
    every _.every(list, [predicate], [context]) Вернёт true, если для каждого значения из list predicate вернёт true. Прерывает обход списка как только обнаружит несоответствие.
    some _.some(list, [predicate], [context]) Вернёт true, если хотя бы для одного значения из list predicate вернёт true. После нахождения первого удовлетворяющего условию элемента выполнение функции прерывается.
    contains _.contains(list, value, [fromIndex]) Вернёт true, если в list содержится элемент, эквивалентный value. Для сравнения используется оператор ===. Если list является массивом, будет вызван метод indexOf. Используйте fromIndex, чтобы начать поиск с конкретного индекса.
    pluck _.pluck(list, propertyName) Краткий алиас для одного из наиболее частых применений функции map: вернёт массив, состоящий из значений свойства propertyName каждого из элементов list.
    max _.max(list, [iteratee], [context]) Вернёт максимальное значение из list. Если был передан iteratee, то он будет использован для генерация критерия, по которому будет проведено сравнение. Если список пуст, будет возвращено -Infinity. Поэтому используйте isEmpty для проверки. Не-числовые элементы list будут пропущены.
    min _.min(list, [iteratee], [context]) Вернёт минимальное значение из list. Если был передан iteratee, то он будет использован для генерации критерия, по которому будет проведено сравнение. Если список пуст, будет возвращено Infinity. Поэтому используйте isEmpty для проверки. Не-числовые элементы list будут пропущены.
    sortBy .sortBy(list, iteratee, [context]) Возвращает копию списка, отсортированную по возрастанию значений, которые возвращает функция iteratee, вызываемая на каждом элементе списка. Параметр iteratee может также быть названием поля, по которому должна вестить сортировка (например length).
    shuffle _.shuffle(list) Вернет перемешанную копию list, используя метод случайного перемешивания Фишера-Ятса.
    sample _.sample(list, [n]) Возвращает n случайных элементов из list. Если аргумент n не был передан, вернёт один элемент.
    toArray _.toArray(list) Сконвертирует list в массив. Удобен, например, для преобразования объекта arguments.
    size _.size(list) Вернёт количество элементов в list.
    partition _.partition(array, predicate) Разобъёт массив array на две части: одна - для элементов которой функция predicate вернёт true, и другая - для всех остальных.

Массивы
    first _.first(array, [n]) Возвращает первый элемент массива. Если передать n, вернёт n элементов с начала.
    last _.last(array, [n]) Возвращает последний элемент массива. Если был задан параметр n - вернёт n последних элементов.
    rest _.rest(array, [index]) Возвращает все элементы массива, кроме первого. Передайте агрумент index чтобы отбросить больше элементов с начала (до index).
    compact _.compact(array) Возвращает копию массива, без всех "ложных" значений. В JavaScript "ложными" считаются false, null, 0, "", undefined и NaN.
    flatten _.flatten(array, [shallow]) "Выравнивает" вложенные массивы (любого уровня вложенности), склеивая в одноуровневый массив. Если передать флаг shallow, выровняет только один уровень.
    without _.without(array, *values) Возвращает копию массива, в которой удалены все значения values. Для сравнения будет использован оператор ===.
    union _.union(*arrays) Объединит уникальные элементы всех массивов arrays. Порядок элементов будет определён порядком их появления в исходных массивах.
    intersection _.intersection(*arrays) Вернёт массив из элементов, встречающихся в каждом из переданных массивов
    difference _.difference(array, *others) Идентичен without, с той разницей, что значения, которые необходимо исключить, передаются в виде массивов other.
    uniq _.uniq(array, [isSorted], [iteratee]) Вернёт версию массива array, состоящую только из уникальных элементов. Для сравнения объектов используется оператор ===. То есть, для одинаковых элементов, будет сохранено только первое вхождение. Если array был предварительно отсортирован, то это стоит указать, передав true в качестве isSorted, т.к. это значительно повлияет на скорость работы алгоритма. Если Вы желаете определить уникальность элементов после неких преобразований, то задайте функцию iteratee, которая их выполнит.
    indexOf _.indexOf(array, value, [isSorted]) Вернёт позицию, на которой находится элемент value в массиве array, или -1, если данный элемент не был найден. Если Вы работаете с большим массивом и знаете, что он был предварительно отсортирован, то укажите это, передав true для isSorted. В таком случае будет использован бинарный поиск, который значительно быстрее перебора. Либо передайте в качетсве третьего аргумента числовой индекс - чтобы произвести поиск начиная с этого индекса.
    lastIndexOf _.lastIndexOf(array, value, [fromIndex]) Вернёт позицию последнего вхождения элемента value в массиве array, или -1, если данный элемент не был найден. Если передать аргумент fromIndex, поиск будет вестить с этой позиции.
    findIndex _.findIndex(array, predicate, [context]) Так же как и _.indexOf, возвращает первый индекс того значения, для которого predicate вернёт true. Если такой элемент не был найден, вернёт -1.
    findLastIndex _.findLastIndex(array, predicate, [context]) Аналогично _.findIndex, но проходит массив в оратном порядке, возвращая индекс ближайший к концу, для которого функция predicate вернёт true.

Функции
    bind _.bind(function, object, *arguments) Связывает функцию function с объектом object. Это значит, что каждый раз когда она будет вызвана, this будет указывать на object. Кроме того, можно задать значения параметров по умолчанию - для этого задайте их в arguments. Данный приём называется каррингом. Для карринга без связывания, используйте partial.
    throttle _.throttle(function, wait, [options]) Вернёт версию функции, которая, при повторных вызовах, исполнится не чаще одного раза в заданный промежуток wait. Полезна для использования при обработке событий, которые происходят слишком часто. По умолчанию throttle выполнит функцию, как только вы её вызовете (в первый раз) при последующих вызовах в течение wait выполняться она не будет. Если Вы хотите, чтобы при первоначальном вызове она не выполнялась – нужно передать {leading: false} в качестве options, а для отключения выполнения функции в конце - {trailing: false}.
    once _.once(function) Вернёт функцию, которая может быть вызвана только один раз. Все последующие её вызовы будут возвращать значение, вычисленное в первый раз. Можно использовать для создания функций-инициализаторов, вместо того, чтобы объявлять флаг и проверять его каждый раз.
    compose _.compose(*functions) Вернёт функцию, скомпонованную из списка functions, таким образом, что каждая функция будет вызвана с аргументом, значение которого вычислено путём вызова следующей за ней функции. В терминах математики результатом композиции функций f(), g(), и h() будет следующее выражение: f(g(h())).

Объекты
    keys _.keys(object) Возвращает все ключи объекта. (В случае массива - индексы.)
    values _.values(object) Возвращает значения всех собственных полей объекта.
    pairs _.pairs(object) Возвращает список пар [key, value] (ключ - значение) объекта. Действие противоположно функции object.
    invert _.invert(object) Вернёт копию object где ключи — значения, а значения — ключи. Чтобы это заработало, нужно, чтобы все значения свойств объекта могли быть уникально сериализованы в строки.
    create _.create(prototype, props) Создаёт новый объект с заданным прототипом, опционально добавляя props в качестве собственных полей объекта. Своего рода Object.create, но без лишней возни с дескрипторами.
    extend _.extend(destination, *sources) Скопирует все свойства из объектов source в объект destination. Все вложенные объекты или массивы будут скопированы "по ссылке" (т.е. не создавая копий). Если объекты source имеют одноименные свойства, то значения каждого будет затёрто значениями из следующего.
    pick _.pick(object, *keys) Возвращает копию объекта, содержащую только указанные ключи. Вместо ключей, можно указать функцию, определяющую, какие ключи оставить.
    omit _.omit(object, *keys) Возвращает копию объекта без указанных ключей (или массива ключей). Вместо ключей, можно передать функцию, которая будет определять, какие ключи отбросить.
    defaults _.defaults(object, *defaults) Проинициализирует неопределённые (undefined) свойства объета значениями одноимённых свойств из defaults. Если же какие-то свойства объекта уже определены, то они не будут изменены.
    has _.has(object, key) Проверяет, содержит ли объект указанный ключ. Идентично object.hasOwnProperty(key), но использует безопасную ссылку на функцию hasOwnProperty, на случай, если функция была случайно затёрта.
    isEqual _.isEqual(object, other)Выполняет оптимизированное "глубокое" сравнение двух объектов, чтобы определить их эквивалентность.
    isMatch _.isMatch(object, properties) Проверяет, содержатся ли ключи-значения properties в объекте.
    isEmpty _.isEmpty(object) Вернёт true если коллекция object не содержит ни одного значения. Для строк и массивов _.isEmpty проверяет длину на равенство 0.
    isArray _.isArray(object) Возвращает true если object - это массив.
    isObject _.isObject(value) Возвращает true если value - это объект. Примите во внимание, что массивы и функции в JavaScript это тоже объекты, тогда как строки и числа - нет.
    isFunction _.isFunction(object) Возвращает true если object это функция.
    isString _.isString(object) Возвращает true если object это строка.
    isNumber _.isNumber(object) Возвращает true если object это число (включая NaN).
    isBoolean _.isBoolean(object) Возвращает true если object это true или false.
    isNull _.isNull(object) Возвращает true если значение object равно null.
    isUndefined Возвращает true если значение value равно undefined: _.isUndefined(value)

Утилиты
    noConflict Отвяжет переменную _ от объекта Underscore. Вернёт ссылку на объект var underscore = _.noConflict();
    noop Всегда возвращает undefined, вне зависимости от переданных аргументов. Полезна в качестве "заглушки" для опциональных обработчиков событий (callbacks).
    random Возвращает случайное целое число, в диапазоне от min до max, включительно. Если вы передали только один агрумент, будет использован диапазон от 0 до переданного числа.
    uniqueId Генерирует абсолютно уникальные ID для модели или элемента DOM, на клиентской стороне. Если был передан prefix, ID будет добавлен к нему.
    result Если property - функция, она будет вызвана с object в качестве контекста. Иначе - возвращена как результат. Если передано дефолтное значение defaultValue, а property - не существует или равно undefined, будет возвращено значение по умолчанию. Если defaultValue - это функция, то будет возвращён результат её выполнения
    now Возвращает целочисленное значение текущего времени (unix-time timestamp), используя самый быстрый из доступных методов. Полезно при реализации таймеров или анимаций.
